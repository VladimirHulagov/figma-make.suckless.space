import React, { useState, useCallback, useMemo } from 'react';
import ReactFlow, {
  Node,
  Edge,
  Controls,
  Background,
  useNodesState,
  useEdgesState,
  MarkerType,
  Position,
  Handle,
  NodeProps,
  useReactFlow,
  ReactFlowProvider,
} from 'reactflow';
import 'reactflow/dist/style.css';
import { motion } from 'motion/react';
import { Card } from './ui/card';
import { Button } from './ui/button';
import { Textarea } from './ui/textarea';
import { Input } from './ui/input';
import { Plus, RotateCcw, Check, X, ThumbsUp, ThumbsDown, MessageCircle, Send } from 'lucide-react';

// –¢–∏–ø—ã –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
type ArgumentType = 'main' | 'support' | 'objection';

interface Comment {
  id: string;
  author: string;
  text: string;
  timestamp: Date;
  votes: number;
}

interface ArgumentData {
  id: string;
  text: string;
  type: ArgumentType;
  author: string;
  votes: number;
  dislikes: number;
  comments: Comment[];
  hasChildren?: boolean;
  isEditing?: boolean;
  isCommentsExpanded?: boolean;
}

// –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —É–∑–ª–∞
const ArgumentNode: React.FC<NodeProps<ArgumentData> & { 
  onAddArgument?: (nodeId: string, type: 'support' | 'objection') => void;
  onEditArgument?: (nodeId: string, newText: string) => void;
  onCancelEdit?: (nodeId: string) => void;
  onToggleComments?: (nodeId: string) => void;
  onVote?: (nodeId: string, type: 'like' | 'dislike') => void;
  onAddComment?: (nodeId: string, comment: string) => void;
}> = React.memo(({ 
  data, 
  selected, 
  onAddArgument,
  onEditArgument,
  onCancelEdit,
  onToggleComments,
  onVote,
  onAddComment
}) => {
  const [editText, setEditText] = React.useState(data.text);
  const [newComment, setNewComment] = React.useState('');
  const textareaRef = React.useRef<HTMLTextAreaElement>(null);
  const commentInputRef = React.useRef<HTMLInputElement>(null);

  // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  React.useEffect(() => {
    if (data.isEditing && textareaRef.current) {
      textareaRef.current.focus();
      textareaRef.current.select();
    }
  }, [data.isEditing]);

  const handleSave = () => {
    if (editText.trim()) {
      onEditArgument?.(data.id, editText.trim());
    }
  };

  const handleCancel = () => {
    setEditText(data.text);
    onCancelEdit?.(data.id);
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {
      e.preventDefault();
      handleSave();
    } else if (e.key === 'Escape') {
      e.preventDefault();
      handleCancel();
    }
  };

  const handleAddComment = () => {
    if (newComment.trim()) {
      onAddComment?.(data.id, newComment.trim());
      setNewComment('');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
      setTimeout(() => {
        if (commentInputRef.current) {
          commentInputRef.current.focus();
        }
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
        const commentsContainer = commentInputRef.current?.closest('.space-y-2');
        if (commentsContainer) {
          commentsContainer.scrollTop = commentsContainer.scrollHeight;
        }
      }, 200);
    }
  };

  const handleCommentKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      handleAddComment();
    }
  };

  const formatTime = (date: Date) => {
    const now = new Date();
    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));
    
    if (diffInHours < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffInHours < 24) return `${diffInHours}—á –Ω–∞–∑–∞–¥`;
    
    const diffInDays = Math.floor(diffInHours / 24);
    if (diffInDays < 7) return `${diffInDays}–¥ –Ω–∞–∑–∞–¥`;
    
    return date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'short' });
  };
  const getNodeColor = (type: ArgumentType) => {
    switch (type) {
      case 'main': return '#00b7ff';
      case 'support': return '#10b981';
      case 'objection': return '#ef4444';
      default: return '#6b7280';
    }
  };

  const getNodeIcon = (type: ArgumentType) => {
    switch (type) {
      case 'main': return 'üéØ';
      case 'support': return '‚úÖ';
      case 'objection': return '‚ùå';
      default: return 'üí≠';
    }
  };

  return (
    <motion.div
      key={`argument-node-${data.id}`}
      layout={data.isCommentsExpanded ? false : true} // –û—Ç–∫–ª—é—á–∞–µ–º layout –ø—Ä–∏ —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
      initial={data.id.length > 1 ? { opacity: 0, scale: 0.8 } : false}
      animate={{ 
        opacity: 1, 
        scale: 1,
        width: data.isEditing ? 400 : 300
      }}
      transition={{ 
        layout: { 
          duration: 0.4, 
          ease: [0.25, 0.46, 0.45, 0.94],
          type: "tween"
        },
        opacity: { duration: 0.3, ease: "easeOut" },
        scale: { duration: 0.3, ease: "easeOut" },
        width: { duration: 0.4, ease: [0.25, 0.46, 0.45, 0.94] }
      }}
      className="relative argument-node-rebalancing"
      style={{ position: 'relative' }}
    >
      {/* Handle —Å–≤–µ—Ä—Ö—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –≥–ª–∞–≤–Ω—ã–π —É–∑–µ–ª */}
      {data.type !== 'main' && (
        <Handle
          type="target"
          position={Position.Top}
          className="w-3 h-3"
          style={{ background: getNodeColor(data.type) }}
        />
      )}
      
      <Card 
        className={`
          ${data.isEditing ? 'w-[400px]' : 'w-[300px]'} p-4 cursor-pointer transition-all duration-400
          ${selected ? 'ring-2 ring-primary shadow-lg' : ''}
          ${data.type === 'main' ? 'suckless-shadow-lg' : 'suckless-shadow'}
          ${data.isEditing ? 'ring-2 ring-primary/50 suckless-shadow-lg editing-node-highlight' : ''}
        `}
        style={{
          borderLeft: `4px solid ${getNodeColor(data.type)}`,
          background: data.type === 'main' ? 'linear-gradient(135deg, #1e2024 0%, #252830 100%)' : undefined
        }}
      >
        <div className="flex items-start space-x-3">
          <div 
            className="text-lg flex-shrink-0 mt-1"
            style={{ color: getNodeColor(data.type) }}
          >
            {getNodeIcon(data.type)}
          </div>
          
          <div className="flex-1 min-w-0">
            {data.isEditing ? (
              // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
              <div className="space-y-3">
                <Textarea
                  ref={textareaRef}
                  value={editText}
                  onChange={(e) => setEditText(e.target.value)}
                  onKeyDown={handleKeyDown}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞..."
                  className="min-h-[80px] text-sm resize-none"
                />
                
                <div className="flex items-center justify-between">
                  <div className="flex space-x-2">
                    <Button
                      size="sm"
                      onClick={handleSave}
                      disabled={!editText.trim()}
                      className="flex items-center space-x-1 text-xs h-7"
                    >
                      <Check className="w-3 h-3" />
                      <span>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</span>
                    </Button>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={handleCancel}
                      className="flex items-center space-x-1 text-xs h-7"
                    >
                      <X className="w-3 h-3" />
                      <span>–û—Ç–º–µ–Ω–∞</span>
                    </Button>
                  </div>
                  
                  <div className="text-xs text-muted-foreground">
                    Ctrl+Enter –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                  </div>
                </div>
              </div>
            ) : (
              // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
              <>
                <p className="text-sm leading-relaxed text-foreground break-words">
                  {data.text}
                </p>
                
                <div className="flex items-center justify-between mt-3 text-xs text-muted-foreground">
                  <span className="truncate">{data.author}</span>
                  <div className="flex items-center space-x-3 flex-shrink-0">
                    {/* –õ–∞–π–∫–∏ –∏ –¥–∏–∑–ª–∞–π–∫–∏ */}
                    <div className="flex items-center space-x-2">
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          onVote?.(data.id, 'like');
                        }}
                        className="flex items-center space-x-1 hover:text-green-500 transition-colors vote-button"
                      >
                        <ThumbsUp className="w-3 h-3" />
                        <span>{data.votes}</span>
                      </button>
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          onVote?.(data.id, 'dislike');
                        }}
                        className="flex items-center space-x-1 hover:text-red-500 transition-colors vote-button"
                      >
                        <ThumbsDown className="w-3 h-3" />
                        <span>{data.dislikes}</span>
                      </button>
                    </div>
                    
                    {/* –ö–Ω–æ–ø–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ */}
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        onToggleComments?.(data.id);
                      }}
                      className={`flex items-center space-x-1 transition-colors ${
                        data.isCommentsExpanded ? 'text-primary' : 'hover:text-primary'
                      }`}
                    >
                      <MessageCircle className="w-3 h-3" />
                      <span>{data.comments.length}</span>
                    </button>
                  </div>
                </div>

                {/* –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ */}
                {onAddArgument && !data.isCommentsExpanded && (
                  <div className="mt-3 flex space-x-2">
                    <Button
                      size="sm"
                      variant="outline"
                      className="flex items-center space-x-1 text-xs h-7 bg-background/50 hover:bg-background/80"
                      onClick={(e) => {
                        e.stopPropagation();
                        onAddArgument?.(data.id, 'support');
                      }}
                    >
                      <Plus className="w-3 h-3" />
                      <span>–ó–∞</span>
                    </Button>
                    <Button
                      size="sm"
                      variant="outline"
                      className="flex items-center space-x-1 text-xs h-7 bg-background/50 hover:bg-background/80"
                      onClick={(e) => {
                        e.stopPropagation();
                        onAddArgument?.(data.id, 'objection');
                      }}
                    >
                      <Plus className="w-3 h-3" />
                      <span>–ü—Ä–æ—Ç–∏–≤</span>
                    </Button>
                  </div>
                )}
              </>
            )}
          </div>
        </div>

        {/* –°–µ–∫—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ - –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ */}
        {data.isCommentsExpanded && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            transition={{ duration: 0.3, ease: "easeOut" }}
            className="comments-expanded p-4 space-y-3"
            onClick={(e) => e.stopPropagation()} // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫–∞
          >
            {/* –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ */}
            <div className="space-y-2 max-h-48 overflow-y-auto scroll-smooth comments-scroll">
              {data.comments.length > 0 ? (
                data.comments.map((comment) => (
                  <motion.div 
                    key={comment.id} 
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.2, ease: "easeOut" }}
                    className="bg-muted/30 rounded-md p-2 text-xs comment-item"
                  >
                    <div className="flex items-center justify-between mb-1">
                      <span className="font-medium text-foreground">{comment.author}</span>
                      <div className="flex items-center space-x-2 text-muted-foreground">
                        <span>{formatTime(comment.timestamp)}</span>
                        <div className="flex items-center space-x-1">
                          <ThumbsUp className="w-2.5 h-2.5" />
                          <span>{comment.votes}</span>
                        </div>
                      </div>
                    </div>
                    <p className="text-muted-foreground leading-relaxed">{comment.text}</p>
                  </motion.div>
                ))
              ) : (
                <div className="flex items-center justify-center h-24 text-muted-foreground text-xs">
                  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç
                </div>
              )}
            </div>
            
            {/* –ü–æ–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è */}
            <div className="flex space-x-2 border-t border-border pt-3">
              <Input
                ref={commentInputRef}
                value={newComment}
                onChange={(e) => setNewComment(e.target.value)}
                onKeyDown={handleCommentKeyDown}
                placeholder="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."
                className="flex-1 text-xs h-8"
              />
              <Button
                size="sm"
                onClick={handleAddComment}
                disabled={!newComment.trim()}
                className="h-8 px-2"
              >
                <Send className="w-3 h-3" />
              </Button>
            </div>
          </motion.div>
        )}
      </Card>

      {/* Handle —Å–Ω–∏–∑—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É —É–∑–ª–∞ –µ—Å—Ç—å –∏–ª–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–µ—Ç–∏ */}
      {(data.hasChildren || data.type === 'main') && (
        <Handle
          type="source"
          position={Position.Bottom}
          className="w-3 h-3"
          style={{ background: getNodeColor(data.type) }}
        />
      )}
    </motion.div>
  );
});

// –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–µ—Ä–µ–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–∏
function ArgumentationTreeInner() {
  // –î–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–ª–∏—á–∏–∏ –¥–µ—Ç–µ–π
  const argumentsData: ArgumentData[] = [
    {
      id: '1',
      text: '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –º–æ–∂–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ 10 –ª–µ—Ç',
      type: 'main',
      author: 'TechVisionary',
      votes: 24,
      dislikes: 12,
      comments: [
        {
          id: 'c1-1',
          author: 'SkepticalDev',
          text: '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–æ—á–∫–∞ –∑—Ä–µ–Ω–∏—è, –Ω–æ –Ω–µ —Å—Ç–æ–∏—Ç –∑–∞–±—ã–≤–∞—Ç—å –ø—Ä–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.',
          timestamp: new Date('2024-01-15T10:30:00'),
          votes: 5
        },
        {
          id: 'c1-2', 
          author: 'FutureBuilder',
          text: '–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω! –£–∂–µ —Å–µ–π—á–∞—Å –≤–∏–¥–∏–º –∫–∞–∫ –ò–ò –ø–æ–º–æ–≥–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—É—Ç–∏–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.',
          timestamp: new Date('2024-01-15T14:22:00'),
          votes: 8
        }
      ],
      hasChildren: true
    },
    {
      id: '2', 
      text: '–ò–ò —É–∂–µ —Å–µ–π—á–∞—Å –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –ª—É—á—à–µ –º–Ω–æ–≥–∏—Ö junior —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤',
      type: 'support',
      author: 'CodeMaster',
      votes: 18,
      dislikes: 7,
      comments: [
        {
          id: 'c2-1',
          author: 'JuniorDev2024',
          text: '–≠—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ. Junior —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—á–∞—Ç—Å—è –∏ —Ä–∞–∑–≤–∏–≤–∞—é—Ç—Å—è.',
          timestamp: new Date('2024-01-14T09:15:00'),
          votes: 12
        }
      ],
      hasChildren: true
    },
    {
      id: '3',
      text: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–≤–æ–¥–∏–ª–∞ –∫ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –≤ –ø—Ä–æ—à–ª–æ–º',
      type: 'support', 
      author: 'HistoryBuff',
      votes: 15,
      dislikes: 9,
      comments: [],
      hasChildren: false
    },
    {
      id: '4',
      text: '–ò–ò –Ω–µ –º–æ–∂–µ—Ç –ø–æ–Ω–∏–º–∞—Ç—å –±–∏–∑–Ω–µ—Å-—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –æ–±—â–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏',
      type: 'objection',
      author: 'ProductManager',
      votes: 31,
      dislikes: 6,
      comments: [
        {
          id: 'c4-1',
          author: 'BusinessAnalyst',
          text: '–ò–º–µ–Ω–Ω–æ! –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –Ω—é–∞–Ω—Å–æ–≤ –±–∏–∑–Ω–µ—Å–∞ - —ç—Ç–æ –∫–ª—é—á–µ–≤–∞—è —á–∞—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.',
          timestamp: new Date('2024-01-13T16:45:00'),
          votes: 15
        }
      ],
      hasChildren: true
    },
    {
      id: '5',
      text: '–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è',
      type: 'objection',
      author: 'SeniorDev',
      votes: 28,
      dislikes: 4,
      comments: [],
      hasChildren: false
    },
    {
      id: '6',
      text: 'GPT-4 –∏ Copilot —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–ø–µ—á–∞—Ç–ª—è—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
      type: 'support',
      author: 'AIEnthusiast', 
      votes: 12,
      dislikes: 3,
      comments: [],
      hasChildren: false
    },
    {
      id: '7',
      text: '–°–ª–æ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–±—É—é—Ç –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –¥–æ–º–µ–Ω–∞',
      type: 'objection',
      author: 'SystemArchitect',
      votes: 22,
      dislikes: 2,
      comments: [],
      hasChildren: false
    }
  ];

  // –°–æ–∑–¥–∞–Ω–∏–µ —É–∑–ª–æ–≤ –¥–ª—è React Flow —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º–∏
  const initialNodes: Node<ArgumentData>[] = useMemo(() => [
    {
      id: '1',
      type: 'argumentNode',
      position: { x: 600, y: 50 },
      data: argumentsData[0]
    },
    {
      id: '2', 
      type: 'argumentNode',
      position: { x: 250, y: 300 },
      data: argumentsData[1]
    },
    {
      id: '3',
      type: 'argumentNode', 
      position: { x: 600, y: 300 },
      data: argumentsData[2]
    },
    {
      id: '4',
      type: 'argumentNode',
      position: { x: 950, y: 300 },
      data: argumentsData[3]
    },
    {
      id: '5', 
      type: 'argumentNode',
      position: { x: 1300, y: 300 },
      data: argumentsData[4]
    },
    {
      id: '6',
      type: 'argumentNode',
      position: { x: 250, y: 580 }, // –ü–æ —Ü–µ–Ω—Ç—Ä—É –ø–æ–¥ —É–∑–ª–æ–º 2
      data: argumentsData[5]
    },
    {
      id: '7',
      type: 'argumentNode', 
      position: { x: 950, y: 580 }, // –ü–æ —Ü–µ–Ω—Ç—Ä—É –ø–æ–¥ —É–∑–ª–æ–º 4
      data: argumentsData[6]
    }
  ], []);

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —É–∑–ª–∞–º–∏
  const initialEdges: Edge[] = useMemo(() => {
    const baseEdges = [
      {
        id: 'e1-2',
        source: '1',
        target: '2',
        type: 'step', // –£ —É–∑–ª–∞ 1 –º–Ω–æ–≥–æ –¥–µ—Ç–µ–π
        markerEnd: { type: MarkerType.ArrowClosed, color: '#10b981' },
        style: { stroke: '#10b981', strokeWidth: 2 }
      },
      {
        id: 'e1-3', 
        source: '1',
        target: '3',
        type: 'step', // –£ —É–∑–ª–∞ 1 –º–Ω–æ–≥–æ –¥–µ—Ç–µ–π
        markerEnd: { type: MarkerType.ArrowClosed, color: '#10b981' },
        style: { stroke: '#10b981', strokeWidth: 2 }
      },
      {
        id: 'e1-4',
        source: '1', 
        target: '4',
        type: 'step', // –£ —É–∑–ª–∞ 1 –º–Ω–æ–≥–æ –¥–µ—Ç–µ–π
        markerEnd: { type: MarkerType.ArrowClosed, color: '#ef4444' },
        style: { stroke: '#ef4444', strokeWidth: 2, strokeDasharray: '5,5' }
      },
      {
        id: 'e1-5',
        source: '1',
        target: '5', 
        type: 'step', // –£ —É–∑–ª–∞ 1 –º–Ω–æ–≥–æ –¥–µ—Ç–µ–π
        markerEnd: { type: MarkerType.ArrowClosed, color: '#ef4444' },
        style: { stroke: '#ef4444', strokeWidth: 2, strokeDasharray: '5,5' }
      },
      {
        id: 'e2-6',
        source: '2',
        target: '6',
        type: 'straight', // –£ —É–∑–ª–∞ 2 —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–µ–±–µ–Ω–æ–∫
        markerEnd: { type: MarkerType.ArrowClosed, color: '#10b981' },
        style: { stroke: '#10b981', strokeWidth: 2 }
      },
      {
        id: 'e4-7',
        source: '4',
        target: '7',
        type: 'straight', // –£ —É–∑–ª–∞ 4 —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–µ–±–µ–Ω–æ–∫
        markerEnd: { type: MarkerType.ArrowClosed, color: '#ef4444' },
        style: { stroke: '#ef4444', strokeWidth: 2, strokeDasharray: '5,5' }
      }
    ];
    
    return baseEdges;
  }, []);

  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);
  const [nextId, setNextId] = useState(8);
  const { fitView } = useReactFlow();

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤ —É–∑–ª–æ–≤ –∏ –æ—Ç—Å—Ç—É–ø–æ–≤
  const NODE_WIDTH = 300;
  const NODE_WIDTH_EDITING = 400;
  const NODE_HEIGHT = 120;
  const NODE_HEIGHT_EDITING = 180;
  const NODE_HEIGHT_COMMENTS = 300; // –í—ã—Å–æ—Ç–∞ —É–∑–ª–∞ —Å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
  const MIN_HORIZONTAL_SPACING = 50;
  const MIN_VERTICAL_SPACING = 280;
  const COLLISION_PADDING = 20;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–≤—è–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–µ–π
  const getEdgeType = useCallback((parentId: string, currentEdges: Edge[]) => {
    const childEdges = currentEdges.filter(edge => edge.source === parentId);
    return childEdges.length === 1 ? 'straight' : 'step';
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö edges —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
  const updateEdgeTypes = useCallback((currentEdges: Edge[]) => {
    return currentEdges.map(edge => {
      const edgeType = getEdgeType(edge.source, currentEdges);
      return {
        ...edge,
        type: edgeType
      };
    });
  }, [getEdgeType]);

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –¥–≤—É—Ö —É–∑–ª–æ–≤
  const checkNodesCollision = useCallback((node1: Node, node2: Node) => {
    const padding = COLLISION_PADDING;
    
    // –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ –¥–ª—è —É–∑–ª–æ–≤ —Å —Ä–∞—Å–∫—Ä—ã—Ç—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    if (node1.data?.isCommentsExpanded || node2.data?.isCommentsExpanded) {
      return false;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —É–∑–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const node1Width = node1.data?.isEditing ? NODE_WIDTH_EDITING : NODE_WIDTH;
    const node1Height = node1.data?.isEditing ? NODE_HEIGHT_EDITING : NODE_HEIGHT;
    const node2Width = node2.data?.isEditing ? NODE_WIDTH_EDITING : NODE_WIDTH;
    const node2Height = node2.data?.isEditing ? NODE_HEIGHT_EDITING : NODE_HEIGHT;
    
    const rect1 = {
      left: node1.position.x - node1Width / 2 - padding,
      right: node1.position.x + node1Width / 2 + padding,
      top: node1.position.y - padding,
      bottom: node1.position.y + node1Height + padding
    };
    const rect2 = {
      left: node2.position.x - node2Width / 2 - padding,
      right: node2.position.x + node2Width / 2 + padding,
      top: node2.position.y - padding,
      bottom: node2.position.y + node2Height + padding
    };

    return !(rect1.right < rect2.left || 
             rect1.left > rect2.right || 
             rect1.bottom < rect2.top || 
             rect1.top > rect2.bottom);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
  const findOptimalPosition = useCallback((
    parentNode: Node, 
    currentNodes: Node[], 
    type: 'support' | 'objection',
    currentEdges: Edge[]
  ) => {
    const childEdges = currentEdges.filter(edge => edge.source === parentNode.id);
    const childNodes = currentNodes.filter(node => 
      childEdges.some(edge => edge.target === node.id)
    );

    const supportNodes = childNodes.filter(node => node.data.type === 'support');
    const objectionNodes = childNodes.filter(node => node.data.type === 'objection');
    const totalChildren = supportNodes.length + objectionNodes.length;

    let baseY = parentNode.position.y + MIN_VERTICAL_SPACING;

    // –ï—Å–ª–∏ —ç—Ç–æ –±—É–¥–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–±–µ–Ω–æ–∫, —Ä–∞–∑–º–µ—â–∞–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É
    if (totalChildren === 0) {
      return { x: parentNode.position.x, y: baseY };
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
    let baseX: number;
    let spacing = Math.max(MIN_HORIZONTAL_SPACING, NODE_WIDTH + 50);
    
    if (type === 'support') {
      const supportCount = supportNodes.length;
      baseX = parentNode.position.x - spacing * (supportCount + 1);
    } else {
      const objectionCount = objectionNodes.length;
      baseX = parentNode.position.x + spacing * (objectionCount + 1);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é
    let testX = baseX;
    let iterations = 0;
    const maxIterations = 20;

    while (iterations < maxIterations) {
      const testNode = {
        id: 'test',
        position: { x: testX, y: baseY },
        data: {} as ArgumentData,
        type: 'argumentNode'
      } as Node<ArgumentData>;

      let hasCollision = false;
      for (const node of currentNodes) {
        if (checkNodesCollision(testNode, node)) {
          hasCollision = true;
          break;
        }
      }

      if (!hasCollision) {
        return { x: testX, y: baseY };
      }

      // –°–¥–≤–∏–≥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
      if (type === 'support') {
        testX -= spacing * 0.5; // –°–¥–≤–∏–≥–∞–µ–º –≤–ª–µ–≤–æ
      } else {
        testX += spacing * 0.5; // –°–¥–≤–∏–≥–∞–µ–º –≤–ø—Ä–∞–≤–æ
      }

      iterations++;
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–∑–∏—Ü–∏—é –±–µ–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é
    return { x: baseX, y: baseY };
  }, [checkNodesCollision]);

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ä–µ–≤–∞ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
  const rebalanceTree = useCallback((currentNodes: Node[], currentEdges: Edge[], newNodeId?: string) => {
    const rebalancedNodes = [...currentNodes];
    const iterations = 3; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∑–ª—ã —Å —Ä–∞—Å–∫—Ä—ã—Ç—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ - –µ—Å–ª–∏ –¥–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫—É
    const hasExpandedComments = rebalancedNodes.some(node => node.data?.isCommentsExpanded);
    if (hasExpandedComments) {
      return rebalancedNodes;
    }

    for (let iter = 0; iter < iterations; iter++) {
      let hasChanges = false;

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É–∑–ª—ã –ø–æ —É—Ä–æ–≤–Ω—è–º
      const levels: { [level: number]: Node[] } = {};
      rebalancedNodes.forEach(node => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —É–∑–ª–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–≤—è–∑–µ–π –¥–æ –∫–æ—Ä–Ω—è
        let level = 0;
        if (node.data.type !== 'main') {
          const parentEdge = currentEdges.find(edge => edge.target === node.id);
          if (parentEdge) {
            const parentNode = rebalancedNodes.find(n => n.id === parentEdge.source);
            if (parentNode?.data.type !== 'main') {
              level = 2;
            } else {
              level = 1;
            }
          }
        }
        
        if (!levels[level]) levels[level] = [];
        levels[level].push(node);
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
      Object.entries(levels).forEach(([levelStr, levelNodes]) => {
        const level = parseInt(levelStr);
        if (level === 0) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —É–∑–µ–ª

        levelNodes.forEach((node, index) => {
          const nodeIndex = rebalancedNodes.findIndex(n => n.id === node.id);
          if (nodeIndex === -1) return;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —É–∑–ª–∞–º–∏
          for (let i = 0; i < rebalancedNodes.length; i++) {
            if (i === nodeIndex) continue;
            
            const otherNode = rebalancedNodes[i];
            if (checkNodesCollision(node, otherNode)) {
              // –í—ã—á–∏—Å–ª—è–µ–º —Å–¥–≤–∏–≥ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
              const deltaX = node.position.x - otherNode.position.x;
              const deltaY = node.position.y - otherNode.position.y;
              
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–≤–∏–≥–∞
              let moveX = 0;
              let moveY = 0;

              if (Math.abs(deltaX) > Math.abs(deltaY)) {
                // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
                moveX = deltaX > 0 ? NODE_WIDTH + MIN_HORIZONTAL_SPACING : -(NODE_WIDTH + MIN_HORIZONTAL_SPACING);
              } else {
                // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ  
                moveY = deltaY > 0 ? NODE_HEIGHT + 50 : -(NODE_HEIGHT + 50);
              }

              // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–¥–≤–∏–≥ –∫ —Ç–µ–∫—É—â–µ–º—É —É–∑–ª—É
              rebalancedNodes[nodeIndex] = {
                ...rebalancedNodes[nodeIndex],
                position: {
                  x: node.position.x + moveX * 0.5,
                  y: node.position.y + moveY * 0.5
                }
              };
              
              hasChanges = true;
            }
          }
        });
      });

      if (!hasChanges) break; // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
    }

    return rebalancedNodes;
  }, [checkNodesCollision]);

  // –§—É–Ω–∫—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–∑–ª–æ–≤ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
  const redistributeHorizontally = useCallback((parentId: string, currentNodes: Node[], currentEdges: Edge[]) => {
    const parentNode = currentNodes.find(n => n.id === parentId);
    if (!parentNode) return currentNodes;

    const childEdges = currentEdges.filter(edge => edge.source === parentId);
    const childNodes = currentNodes.filter(node => 
      childEdges.some(edge => edge.target === node.id)
    );

    if (childNodes.length <= 1) return currentNodes;

    // –†–∞–∑–¥–µ–ª—è–µ–º –¥–µ—Ç–µ–π –ø–æ —Ç–∏–ø–∞–º
    const supportNodes = childNodes.filter(node => node.data.type === 'support')
      .sort((a, b) => a.position.x - b.position.x);
    const objectionNodes = childNodes.filter(node => node.data.type === 'objection')
      .sort((a, b) => a.position.x - b.position.x);

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
    const totalChildren = supportNodes.length + objectionNodes.length;
    const baseSpacing = Math.max(NODE_WIDTH + MIN_HORIZONTAL_SPACING, 300);
    const adaptiveSpacing = Math.min(baseSpacing, baseSpacing * (4 / Math.max(totalChildren, 1)));

    return currentNodes.map(node => {
      // –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —É–∑–ª—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
      const supportIndex = supportNodes.findIndex(n => n.id === node.id);
      if (supportIndex !== -1) {
        return {
          ...node,
          position: {
            x: parentNode.position.x - adaptiveSpacing * (supportIndex + 1),
            y: node.position.y
          }
        };
      }

      // –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —É–∑–ª—ã –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π
      const objectionIndex = objectionNodes.findIndex(n => n.id === node.id);
      if (objectionIndex !== -1) {
        return {
          ...node,
          position: {
            x: parentNode.position.x + adaptiveSpacing * (objectionIndex + 1),
            y: node.position.y
          }
        };
      }

      return node;
    });
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–µ—Ä–µ–≤–∞
  const optimizeTreeLayout = useCallback(() => {
    setNodes((currentNodes) => {
      let optimizedNodes = [...currentNodes];
      
      // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º —É–∑–ª–∞–º –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏—Ö –¥–µ—Ç–µ–π
      const parentIds = new Set(edges.map(edge => edge.source));
      
      parentIds.forEach(parentId => {
        optimizedNodes = redistributeHorizontally(parentId, optimizedNodes, edges);
      });
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—â—É—é –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫—É –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
      return rebalanceTree(optimizedNodes, edges);
    });
  }, [redistributeHorizontally, rebalanceTree, edges]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞
  const handleEditArgument = useCallback((nodeId: string, newText: string) => {
    setNodes((currentNodes) => 
      currentNodes.map(node => 
        node.id === nodeId 
          ? { 
              ...node, 
              data: { 
                ...node.data, 
                text: newText,
                isEditing: false
              } 
            }
          : node
      )
    );
  }, [setNodes]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –∞—Ä–≥—É–º–µ–Ω—Ç
  const handleVote = useCallback((nodeId: string, type: 'like' | 'dislike') => {
    setNodes((currentNodes) =>
      currentNodes.map(node =>
        node.id === nodeId
          ? {
              ...node,
              data: {
                ...node.data,
                votes: type === 'like' ? node.data.votes + 1 : node.data.votes,
                dislikes: type === 'dislike' ? node.data.dislikes + 1 : node.data.dislikes
              }
            }
          : node
      )
    );
  }, [setNodes]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  const handleToggleComments = useCallback((nodeId: string) => {
    setNodes((currentNodes) =>
      currentNodes.map(node =>
        node.id === nodeId
          ? {
              ...node,
              data: {
                ...node.data,
                isCommentsExpanded: !node.data.isCommentsExpanded
              }
            }
          : node
      )
    );
  }, [setNodes]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –ø—É—Å—Ç–æ–º –º–µ—Å—Ç–µ
  const handlePaneClick = useCallback(() => {
    setNodes((currentNodes) =>
      currentNodes.map(node =>
        node.data.isCommentsExpanded
          ? {
              ...node,
              data: {
                ...node.data,
                isCommentsExpanded: false
              }
            }
          : node
      )
    );
  }, [setNodes]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  const handleAddComment = useCallback((nodeId: string, commentText: string) => {
    const newComment: Comment = {
      id: `c${nodeId}-${Date.now()}`,
      author: '–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      text: commentText,
      timestamp: new Date(),
      votes: 0
    };

    setNodes((currentNodes) =>
      currentNodes.map(node =>
        node.id === nodeId
          ? {
              ...node,
              data: {
                ...node.data,
                comments: [...node.data.comments, newComment]
              }
            }
          : node
      )
    );
  }, [setNodes]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleCancelEdit = useCallback((nodeId: string) => {
    setNodes((currentNodes) => {
      const nodeToCancel = currentNodes.find(n => n.id === nodeId);
      
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π —É–∑–µ–ª (–ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç), —É–¥–∞–ª—è–µ–º –µ–≥–æ
      if (nodeToCancel?.data.text.startsWith('–ù–æ–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç')) {
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–≤—è–∑–∏
        setEdges((currentEdges) => 
          currentEdges.filter(edge => edge.target !== nodeId && edge.source !== nodeId)
        );
        
        return currentNodes.filter(node => node.id !== nodeId);
      }
      
      // –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      return currentNodes.map(node => 
        node.id === nodeId 
          ? { ...node, data: { ...node.data, isEditing: false } }
          : node
      );
    });
  }, [setNodes, setEdges]);

  // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–æ–π
  const handleAddArgument = useCallback((parentId: string, type: 'support' | 'objection') => {
    const newId = String(nextId);
    
    setNodes((currentNodes) => {
      setEdges((currentEdges) => {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        const newEdge: Edge = {
          id: `e${parentId}-${newId}`,
          source: parentId,
          target: newId,
          type: 'step',
          markerEnd: { type: MarkerType.ArrowClosed, color: type === 'support' ? '#10b981' : '#ef4444' },
          style: { 
            stroke: type === 'support' ? '#10b981' : '#ef4444', 
            strokeWidth: 2,
            strokeDasharray: type === 'objection' ? '5,5' : '0'
          }
        };
        
        const newEdges = [...currentEdges, newEdge];
        return updateEdgeTypes(newEdges);
      });

      const parentNode = currentNodes.find(n => n.id === parentId);
      if (!parentNode) return currentNodes;

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
      const optimalPosition = findOptimalPosition(parentNode, currentNodes, type, edges);

      const newNode: Node<ArgumentData> = {
        id: newId,
        type: 'argumentNode',
        position: optimalPosition,
        data: {
          id: newId,
          text: `–ù–æ–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç ${type === 'support' ? '–≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É' : '–ø—Ä–æ—Ç–∏–≤'}`,
          type: type,
          author: '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          votes: 0,
          dislikes: 0,
          comments: [],
          hasChildren: false,
          isEditing: true // –ù–æ–≤—ã–π —É–∑–µ–ª —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        }
      };

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —É–∑–µ–ª –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
      const updatedNodes = currentNodes.map(node => 
        node.id === parentId 
          ? { ...node, data: { ...node.data, hasChildren: true } }
          : node
      );
      
      const nodesWithNew = [...updatedNodes, newNode];
      
      // –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —É–∑–ª—ã –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
      const horizontallyRebalanced = redistributeHorizontally(parentId, nodesWithNew, edges);
      
      // –ó–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–±—â–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ä–µ–≤–∞ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
      return rebalanceTree(horizontallyRebalanced, edges, newId);
    });

    setNextId(prev => prev + 1);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∏–¥ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π
    setTimeout(() => {
      fitView({ duration: 600, padding: 0.15 });
    }, 300);
  }, [updateEdgeTypes, findOptimalPosition, redistributeHorizontally, rebalanceTree, fitView, edges]);

  // –°–æ–∑–¥–∞–µ–º –æ–±—ë—Ä–Ω—É—Ç—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å callback
  const WrappedArgumentNode = useCallback((props: NodeProps<ArgumentData>) => (
    <ArgumentNode 
      {...props} 
      onAddArgument={handleAddArgument}
      onEditArgument={handleEditArgument}
      onCancelEdit={handleCancelEdit}
      onToggleComments={handleToggleComments}
      onVote={handleVote}
      onAddComment={handleAddComment}
    />
  ), [handleAddArgument, handleEditArgument, handleCancelEdit, handleToggleComments, handleVote, handleAddComment]);

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–∑–ª–æ–≤
  const nodeTypes = useMemo(() => ({
    argumentNode: WrappedArgumentNode,
  }), [WrappedArgumentNode]);

  const onNodeClick = useCallback((event: React.MouseEvent, node: Node) => {
    // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —É–∑–µ–ª –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (!node.data.isEditing) {
      setNodes((currentNodes) => 
        currentNodes.map(n => 
          n.data.isEditing && n.data.text.startsWith('–ù–æ–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç')
            ? null // –ü–æ–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            : { ...n, data: { ...n.data, isEditing: false } }
        ).filter(Boolean) as Node<ArgumentData>[]
      );
      
      // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —É–∑–ª–æ–≤
      setEdges((currentEdges) => 
        currentEdges.filter(edge => {
          const sourceExists = nodes.some(n => n.id === edge.source && !(n.data.isEditing && n.data.text.startsWith('–ù–æ–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç')));
          const targetExists = nodes.some(n => n.id === edge.target && !(n.data.isEditing && n.data.text.startsWith('–ù–æ–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç')));
          return sourceExists && targetExists;
        })
      );
    }
  }, [setNodes, setEdges, nodes]);

  const handleFitView = useCallback(() => {
    fitView({ duration: 800 });
  }, [fitView]);

  return (
    <div className="h-full w-full relative bg-background">
      {/* –õ–µ–≥–µ–Ω–¥–∞ */}
      <div className="absolute top-4 left-4 z-10 bg-card/90 backdrop-blur-sm border border-border rounded-lg p-3 shadow-lg">
        <div className="grid grid-cols-2 gap-2 text-xs">
          <div className="flex items-center space-x-2">
            <div className="w-3 h-3 rounded" style={{ backgroundColor: '#00b7ff' }}></div>
            <span>–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∑–∏—Å</span>
          </div>
          <div className="flex items-center space-x-2">
            <div className="w-3 h-3 rounded" style={{ backgroundColor: '#10b981' }}></div>
            <span>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</span>
          </div>
          <div className="flex items-center space-x-2">
            <div className="w-3 h-3 rounded" style={{ backgroundColor: '#ef4444' }}></div>
            <span>–í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ</span>
          </div>
          <div className="flex items-center space-x-2">
            <div className="w-8 h-0.5 border-dashed border-muted-foreground"></div>
            <span>–ö—Ä–∏—Ç–∏–∫–∞</span>
          </div>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ Fit View */}
      <div className="absolute top-4 right-4 z-10">
        <Button
          variant="outline"
          size="sm"
          onClick={handleFitView}
          className="flex items-center space-x-2 bg-card/90 backdrop-blur-sm"
        >
          <RotateCcw className="w-4 h-4" />
          <span>–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë</span>
        </Button>
      </div>

      <ReactFlow
        nodes={nodes}
        edges={edges}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        onNodeClick={onNodeClick}
        onPaneClick={handlePaneClick}
        nodeTypes={nodeTypes}
        nodesDraggable={false}
        nodesConnectable={false}
        elementsSelectable={true}
        fitView
        minZoom={0.3}
        maxZoom={1.5}
        defaultViewport={{ x: 0, y: 0, zoom: 0.8 }}
        className="bg-background"
        proOptions={{ hideAttribution: true }}
        nodeOrigin={[0.5, 0]}
        connectionMode="loose"
      >
        <Background 
          color="#2a2d32" 
          size={1}
          style={{ backgroundColor: '#131416' }}
        />
      </ReactFlow>
    </div>
  );
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
export function ArgumentationTree() {
  return (
    <ReactFlowProvider>
      <ArgumentationTreeInner />
    </ReactFlowProvider>
  );
}